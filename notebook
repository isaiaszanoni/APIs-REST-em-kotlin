# APIs REST em Kotlin: Seus serviços prontos para o mundo real

---

## Capitulo 1 - O que é REST, afinal?

→ Realizar a comunicação entre dois sistemas diferentes, independentemente da linguagem em que tenham sido escritos.
E o REST é muito utilizado porque ele estabelece um conjunto de padrões que permite que essa comunicação seja eficiente e interoperável

→Microsserviços - Um aplicativo único, tal como uma suíte de pequenos serviços, cada um executando o seu próprio processo e se comunicando através de mecanismos leves, muitas vezes em uma API com recursos HTTP.

---

> **Dependências deste Capitulo:**
>
> - Spring Web
> - Spring JPA
> - Driver do H2

---

## 1.2 Listagem de Novos Motoristas

Criar uma camada de acesso a um banco de dados e uma classe que representará os motoristas.

- Criação do pacote `domain` e dentro dele o `Entities.kt`. É neste arquivo que ficará nossa data class `Driver`.
- Precisamos modificar essa classe para refletir o estado da nossa base de dados. Utilizamos a anotação `@Entity`.
- Para que o sistema reconheça o campo `id` como pk da tabela, utilizaremos a anotação `@Id`.

**DAO - Acessar a base de dados.** 
Com o Spring JPA fazemos isso criando uma interface e fazendo com que ela estenda a interface `JpaRepository`.
Em sua declaração, utilizaremos a classe Driver, e utilizaremos a PK `Id`, do tipo Long.

- Arquivo `Repositories.kt` dentro do package `domain`. Dentro do arquivo, teremos o repositório `DriverRepository`, que extende a JpaRepository.

---

### Banco de Dados

O H2 é um banco de dados em memória. Muito útil para validar algum código em forma de teste. 
Inicia junto com o projeto e pode ser administrado pelo **Sprint Boot DevTools**.

- http://localhost:8080/h2-console/
- Copiamos a URL para o campo JDBC URL

---

**Interfaces**

Vamos criar o pacote `interfaces` contendo a classe `DriverAPI`, que vai conter o método `listDrivers`, que retorna uma List com os objetos do tipo Driver.

```kotlin
package com.cap01.car.interfaces

import org.springframework.stereotype.Service
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RestController

@Service
@RestController
class DriverAPI {

    @GetMapping
    fun listDrivers() : List<Driver> = emptyList()
}
```

---

**Retorno, JSON, Payload...**

Payloads em JSON são menores do que em XML, que utilizam muitas tags e pesa em redes limitadas, como as redes móveis.

Para informar à nossa API que queremos utilizar JSON, utilizamos a anotação `@RequestMapping` junto do parâmetro `produces`. Este parâmetro recebe uma lista de Strings como dados, mas as strings aceitas estão populadas como constantes na classe MediaType do Spring. Para utilizar o JSON, devemos utilizar o valor aplicado `APPLICATION_JSON_VALUE`.



Por fim, é preciso informar ao Spring qual será a URL do recurso. 

----

## Cap02 - Expandindo o nosso serviço Inicial

## 2.1 Driver By ID

Vamos utilizar o ID para pegar os dados de um motorista específico.

O ID será passado pelo **path parameter**, na URL do recurso.

- `findById` do repositorio
- O retorno é um Optional. Para retornar o Driver presente no Optional, utilizamos o método `.get()`.

```kotlin
// ...
 @GetMapping("drivers/{id}")
    fun findDriver(@PathVariable("id") id: Long) =
        driverRepository.findById(id).get()
// ...
```

## 2.2  Tratamento de erro

- Precisamos tratar erros no método que criamos com `orElseThrow()`. Ele vai receber como parâmetro uma função lâmbda que retorna uma exceção que será lançada. 
  Vamos utilizar o `ResponseStatusException` que recebe um dos valores presentes no enum `HttpStatus`.

```kotlin
// ...
@GetMapping("drivers/{id}")
    fun findDriver(@PathVariable("id") id: Long) =
        driverRepository.findById(id)
            .orElseThrow { ResponseStatusException(HttpStatus.NOT_FOUND) }

// ...
```

---

## 2.4 Negociação de Conteúdo

O Postman conta com um **Headers**. Em temporary headers temos os cabeçalhos enviados para o servidor no momento da requisição para o nosso serviço. O cabeçalho *Accept*, em *Key* é um "pedido" para o servidor enviar o tipo de informação que está destacada no valor. Por default vem com `*/*`, que significa que o cliente aceita literalmente qualquer coisa. Pode ser uma imagem, HTML, PDF, XML, JSON etc.

Na versão do navegador google chrome do livro, o autor destaca que o padrão para o headers é o seguinte:

```
text/html,application/xhtml+xml,application/xml;q=0.9,
image/webp,image/apng,*/*;q=0.8,application/signed-exchange/v=b3.
```

HTML.

Esses valores são chamados de MIME Types, ou, alternativamente, Media Types. 

Esttutura dos Media Types: `<tipo>/<subtipo>`. O tipo é como se fosse a familia (texto, imagem, application (binário apresentado como texto estruturado - JSON)),

A respeito do `*/*`, o asterisco é utilizado como um curinga nos media types. Se for uma API que serve imagens, podemos passar `media type image/*`. Quando o curinga está dos dois lados, significa que ele recebe "qualquer coisa".

Podemos observar que também existe `;q=0.8`. O ponto vírgula serve para separar, e o `q` é um parâmetro. Os números vão de 0.1 até 1.0, e significam:

 

- text/html
- application/xhtml+xml
- image/webp
- image/apng
- application/signed-exchange
- application/xml
- */*

---

**Generated Value** - O nosso ID ficaria muito melhor com auto increment. Basta utilizar a anotação `@GeneratedValue` em cima do atributo e zas!

---

## 2.6 Idempotência: Os efeitos de invocações Sucessivas

Clicando em Send várias vezes, o Id é incrementado. Um novo recurso é criado ao lado do servidor. 
Suponha que você realiza o envio mas quando o servidor está enviando a resposta, por algum motivo, a conexão criada é perdida. Dessa forma, você não consegue receber o resultado da invocação e não sabe se a requisição teve sucesso ou não. E aí? Reenviar a requisição ou não?

Uma propriedade do método HTTP é a **idempotência**, que trata dos efeitos causados por essas sucessivas invocações ao servidor. Dizemos que existe uma idempotência quando o efeito da enésima requisição é igual ao da primeira. Em outras palavras, não importa quantas vezes enviamos uma requisição, nenhuma alteração sobre o estado do servidor será produzida, além daquela feita pela primeira vez.

Isso nos garante uma segurança quando não podemos receber a resposta. 

---

## 2.7 Atualizando os Dados Enviados com PUT e PATCH

**Put**

###### Tarefa

- [ ] Recriar esta lógica

- id no PathVariable
- RequestBody precisa ser chamado para podermos passar os atributos pelo JSON.

Lógica

- Vamos chamar o método findDrive porque caso o driver não exista, já teremos o retorno 404 implementado.
- Vamos criar uma cópia do motorista encontrado com o método `copy()`, e passar os dados como parâmetro para essa cópia. 
- Save do repositório e tá pronto o sorvetinho. 

----

**Patch**

- Outra classe que possa receber dados ou não

- ```kotlin
  data class PatchDriver(
  val name: String?,
  val birthDate: LocalDate?
  )
  ```

- A implementação é semelhante à do PUT, mas vamos utilizar o Elvis Operator, uma instrução do Kotlin que indica que, caso o que esteja à esquerda do operador seja nulo, deve ser utilizado o que está à direita.

---

## 2.8 Apagando os Dados de um Determinado Motorista

O método Delete pode não deixar claro se é permitido ou não enviar dados no corpo, o que pode gerar problemas de acordo com a ferramenta utilizada. O Tomcat aceita o método HTTP DELETE, mas o autor não recomenda que este seja utilizado.

Outra polêmica é em relação à idempotência. O método delete é idempotente, pois apenas a primeira requisição vai produzir alterações sobre o estado do servidor. As próximas não, porque o recurso já terá sido apagado. 

---

## Delete Lógico

---

## 3.2 Solicitações de Viagens

Esta API requer uma atenção especial. Não trata-se de uma simples requisição que insere ou recuperar dados em uma base, mas uma API que toma uma ação.

É importante pensar no melhor recurso a lidar.
Não estamos modelando a API de viagens, mas a de Solicitação de viagem. Quando a solicitação for aceita, entra a **viagem** propriamente dita. 

As URLs REST são hierárquicas. As da direita são subconjuntos das à esquerda. 

No nosso caso particular, não podemos considerar que existe relação entre as solicitações de viagens e as viagens.

- `solicitações/viagens` → Considera-se que viagens pertencem de uma vez só a todas as solicitações de viagens, o que é um erro.
- `/solicitações/{id}/viagens` → Sempre vamos precisar do ID da solicitação para criar uma viagem, o que prejudica a usabilidade da API.
- `/viagens/solicitações` → Parecido com o primeiro caso. Não.
- `/viagens/{id}/solicitações` → não será possível criar uma solicitação sem antes ter uma viagem. Erro semântico.

Para criar uma solicitação nós precisamos:

- Local de Origem,
- Local de Destino
- Passageiro.

Criamos Repository, API e o data class de TravelRequest. 

Nossa API está assim por enquanto: 

```kotlin
package com.cap01.car.interfaces

// imports

@Service
@RestController
@RequestMapping(path = ["/travelRequests"], produces = [MediaType.APPLICATION_JSON_VALUE])
class TravelRequestAPI {

    @PostMapping
    fun makeTravelRequest(@RequestBody travelRequest: TravelRequest) {
            
    }


}
```

Precisamos nos atentar a algumas regras de negócio:

- Salvar as solicitações de viagens.
- Fornecer uma API onde os motoristas interessados possam obter viagens.
- Somente devolver para esses motoristas intreressados as viagens que geograficamente estiverem próximas deles.

----

Vamos criar a classe `TravelService`, que vai chamar o repositório para salvar o pedido

```kotlin
package com.cap01.car.domain

import org.springframework.stereotype.Component

@Component
class TravelService(
    val travelRequestRepository: TravelRequestRepository
) {
    fun saveTravelRequest(travelRequest: TravelRequest) {
        travelRequestRepository.save(travelRequest)
    }
}
```



Agora podemos fazer `travelRequestAPI` ter uma referência para TravelService e salvar a solicitação de viagem:

```kotlin
@Service
@RestController
@RequestMapping(path = ["/travelRequests"], produces = [MediaType.APPLICATION_JSON_VALUE])
class TravelRequestAPI (
    val travelService: TravelService
) {

    @PostMapping
    fun makeTravelRequest(@RequestBody travelRequest: TravelRequest) {
        travelService.saveTravelRequest(travelRequest)
    }

}
```



Agora falta determinar o que o usuário vai receber. Vamos dar uma resposta nesse momento, mas ela será intermediária, e deve sofrer mudanças ao longo do projeto. Neste caso específico, a resposta deve vir quando o usuário aceitar a corrida, o que costuma ser comum quando há o uso de Mensageria e Requisições Assíncronas.

Este caso custuma retornar o código HTTP 202 - Accepted. Ele nos obriga a retornar um cabeçalho `Location`, que o cliente pode usar para consultar o resultado definitivo da requisição. 

Aqui vamos utilizar o Design Pattern `Data Trasfer Object`. Ele consiste na criação de objetos que servisão como intermediários na transmissão de dados.
Nós vamos criar as classes que farão a representação da entrada de dados da nossa API e também da saída. 
Vamos renomear a classe de entrada de `TravelRequestInput`:

```kotlin

```

Problema da Vez: travelService não é compatível com travelRequestInput. Precisamos fazer o mapeamento das entidades na mesma camada.
Nós vamos criar uma classe chamada TravelRequestMapper. Essa classe vai definir um metodo que faça o mapeamento do TravelRequestInput para um objeto do tipo TravelRequest, inclusive procurando pelo passageiro e lançando um código 404 caso não encontre.

```kotlin

```

- Enum com Status da corrida
  - Atributo Status para guardar este status
- dataTime para guardar o momento da solicitação

---

## Inserindo Links: Primeiro Uso de HEATEOAS

→ Saída da nossa API.

- Copiar os atributos da TravelRequest, tirando as anotações e os valores que são populados automaticamente.

```kotlin
data class TravelRequestOutput(
        val id: Long,
        val passenger: Passenger, // Ops
        val origin: String,
        val destination: String,
        val status: TravelRequestStatus,
        val creationDate: LocalDateTime

    )
```

A classe passenger é tratada como uma API separada. Se utilizarmos a classe TravelRequestOutput, o passageiro como um todo será refeernciado na resposta, algo que não desejamos aqui. Por isso utilizamos o Heteoas.

**Hypermedia As The Engine Os Application State**. REST deve utilizar links para relacionar recursos conectados entre si. 

Quando precisamos demonstrar uma relação, que não necessariamente um objeto pertence a outro, devemos utilizar links.

- Spring HETEOAS
- `implementation("org.springframework.hateoas:spring-hateoas")`

A classe `TravelRequestOutput` agora vai ter uma referência ao Spring HETEOAS.

**Link HETEOAS**

Agora, precisamos alterar a classe de API. Para isso, temos que
realizar o seguinte:
1. Primeiro, temos que alterar o tipo de retorno (para retornar
o EntityModel ).
2. Depois, temos que modificar o método para construir um
TravelRequestOutput (através do método map ).
3. Construir um
EntityModel
(através do método
buildOutputModel ).

---

